Id;Title;Category;Interaction;Description
0;Replay Attacks;Tampering;HTTPS;Packets or messages without sequence numbers or timestamps can be captured and replayed in a wide variety of ways. Implement or utilize an existing communication protocol that supports anti-replay techniques (investigate sequence numbers before timers) and strong integrity.
1;Collision Attacks;Tampering;HTTPS;Attackers who can send a series of packets or messages may be able to overlap data. For example, packet 1 may be 100 bytes starting at offset 0. Packet 2 may be 100 bytes starting at offset 25. Packet 2 will overwrite 75 bytes of packet 1. Ensure you reassemble data before filtering it, and ensure you explicitly handle these sorts of cases.
2;Cross Site Scripting;Tampering;HTTPS;The web server 'Proxy Login' could be a subject to a cross-site scripting attack because it does not sanitize untrusted input.
3;Potential Data Repudiation by Proxy Login;Repudiation;HTTPS;Proxy Login claims that it did not receive data from a source outside the trust boundary. Consider using logging or auditing to record the source, time, and summary of the received data.
4;Weak Authentication Scheme;Information Disclosure;HTTPS;Custom authentication schemes are susceptible to common weaknesses such as weak credential change management, credential equivalence, easily guessable credentials, null credentials, downgrade authentication or a weak credential change management system. Consider the impact and potential mitigations for your custom authentication scheme.
5;Potential Process Crash or Stop for Proxy Login;Denial Of Service;HTTPS;Proxy Login crashes, halts, stops or runs slowly
6;Data Flow HTTPS Is Potentially Interrupted;Denial Of Service;HTTPS;An external agent interrupts data flowing across a trust boundary in either direction.
7;Elevation Using Impersonation;Elevation Of Privilege;HTTPS;Proxy Login may be able to impersonate the context of  Client in order to gain additional privilege.
8;Proxy Login May be Subject to Elevation of Privilege Using Remote Code Execution;Elevation Of Privilege;HTTPS; Client may be able to remotely execute code for Proxy Login.
9;Elevation by Changing the Execution Flow in Proxy Login;Elevation Of Privilege;HTTPS;An attacker may pass data into Proxy Login in order to change the flow of program execution within Proxy Login to the attacker's choosing.
10;Cross Site Request Forgery;Elevation Of Privilege;HTTPS;Cross-site request forgery (CSRF or XSRF) is a type of attack in which an attacker forces a user's browser to make a forged request to a vulnerable site by exploiting an existing trust relationship between the browser and the vulnerable web site.  In a simple scenario, a user is logged in to web site A using a cookie as a credential.  The other browses to web site B.  Web site B returns a page with a hidden form that posts to web site A.  Since the browser will carry the user's cookie to web site A, web site B now can take any action on web site A, for example, adding an admin to an account.  The attack can be used to exploit any requests that the browser automatically authenticates, e.g. by session cookie, integrated authentication, IP whitelisting. The attack can be carried out in many ways such as by luring the victim to a site under control of the attacker, getting the user to click a link in a phishing email, or hacking a reputable web site that the victim will visit. The issue can only be resolved on the server side by requiring that all authenticated state-changing requests include an additional piece of secret payload (canary or CSRF token) which is known only to the legitimate web site and the browser and which is protected in transit through SSL/TLS. See the Forgery Protection property on the flow stencil for a list of mitigations.
11;Spoofing the Proxy Login Process;Spoofing;HTTPS;Proxy Login may be spoofed by an attacker and this may lead to unauthorized access to  Client. Consider using a standard authentication mechanism to identify the source process.
12;Proxy Login Process Memory Tampered;Tampering;HTTPS;If Proxy Login is given access to memory, such as shared memory or pointers, or is given the ability to control what  Client executes (for example, passing back a function pointer.), then Proxy Login can tamper with  Client. Consider if the function could work with less access to memory, such as passing data rather than pointers. Copy in data provided, and then validate it.
15;Potential Data Repudiation by  Client;Repudiation;HTTPS; Client claims that it did not receive data from a source outside the trust boundary. Consider using logging or auditing to record the source, time, and summary of the received data.
16;Potential Process Crash or Stop for  Client;Denial Of Service;HTTPS; Client crashes, halts, stops or runs slowly
18;Elevation Using Impersonation;Elevation Of Privilege;HTTPS; Client may be able to impersonate the context of Proxy Login in order to gain additional privilege.
19; Client May be Subject to Elevation of Privilege Using Remote Code Execution;Elevation Of Privilege;HTTPS;Proxy Login may be able to remotely execute code for  Client.
20;Elevation by Changing the Execution Flow in  Client;Elevation Of Privilege;HTTPS;An attacker may pass data into  Client in order to change the flow of program execution within  Client to the attacker's choosing.
23;Cross Site Scripting;Tampering;HTTPS;The web server 'Proxy' could be a subject to a cross-site scripting attack because it does not sanitize untrusted input.
24;Potential Data Repudiation by Proxy;Repudiation;HTTPS;Proxy claims that it did not receive data from a source outside the trust boundary. Consider using logging or auditing to record the source, time, and summary of the received data.
26;Potential Process Crash or Stop for Proxy;Denial Of Service;HTTPS;Proxy crashes, halts, stops or runs slowly
28;Elevation Using Impersonation;Elevation Of Privilege;HTTPS;Proxy may be able to impersonate the context of  Client in order to gain additional privilege.
29;Proxy May be Subject to Elevation of Privilege Using Remote Code Execution;Elevation Of Privilege;HTTPS; Client may be able to remotely execute code for Proxy.
30;Elevation by Changing the Execution Flow in Proxy;Elevation Of Privilege;HTTPS;An attacker may pass data into Proxy in order to change the flow of program execution within Proxy to the attacker's choosing.
31;Cross Site Request Forgery;Elevation Of Privilege;HTTPS;Cross-site request forgery (CSRF or XSRF) is a type of attack in which an attacker forces a user's browser to make a forged request to a vulnerable site by exploiting an existing trust relationship between the browser and the vulnerable web site.  In a simple scenario, a user is logged in to web site A using a cookie as a credential.  The other browses to web site B.  Web site B returns a page with a hidden form that posts to web site A.  Since the browser will carry the user's cookie to web site A, web site B now can take any action on web site A, for example, adding an admin to an account.  The attack can be used to exploit any requests that the browser automatically authenticates, e.g. by session cookie, integrated authentication, IP whitelisting. The attack can be carried out in many ways such as by luring the victim to a site under control of the attacker, getting the user to click a link in a phishing email, or hacking a reputable web site that the victim will visit. The issue can only be resolved on the server side by requiring that all authenticated state-changing requests include an additional piece of secret payload (canary or CSRF token) which is known only to the legitimate web site and the browser and which is protected in transit through SSL/TLS. See the Forgery Protection property on the flow stencil for a list of mitigations.
32;Spoofing the Proxy Process;Spoofing;HTTPS;Proxy may be spoofed by an attacker and this may lead to unauthorized access to  Client. Consider using a standard authentication mechanism to identify the source process.
33;Proxy Process Memory Tampered;Tampering;HTTPS;If Proxy is given access to memory, such as shared memory or pointers, or is given the ability to control what  Client executes (for example, passing back a function pointer.), then Proxy can tamper with  Client. Consider if the function could work with less access to memory, such as passing data rather than pointers. Copy in data provided, and then validate it.
36;Potential Data Repudiation by  Client;Repudiation;HTTPS; Client claims that it did not receive data from a source outside the trust boundary. Consider using logging or auditing to record the source, time, and summary of the received data.
37;Potential Process Crash or Stop for  Client;Denial Of Service;HTTPS; Client crashes, halts, stops or runs slowly
39;Elevation Using Impersonation;Elevation Of Privilege;HTTPS; Client may be able to impersonate the context of Proxy in order to gain additional privilege.
40; Client May be Subject to Elevation of Privilege Using Remote Code Execution;Elevation Of Privilege;HTTPS;Proxy may be able to remotely execute code for  Client.
41;Elevation by Changing the Execution Flow in  Client;Elevation Of Privilege;HTTPS;An attacker may pass data into  Client in order to change the flow of program execution within  Client to the attacker's choosing.
58;Data Logs from an Unknown Source;Repudiation;Binary;Do you accept logs from unknown or weakly authenticated users or systems? Identify and authenticate the source of the logs before accepting them.
57;Lower Trusted Subject Updates Logs;Repudiation;Binary;If you have trust levels, is anyone other outside of the highest trust level allowed to log? Letting everyone write to your logs can lead to repudiation problems. Only allow trusted code to log.
56;Possible SQL Injection Vulnerability for PostgreSQL Database;Tampering;Binary;SQL injection is an attack in which malicious code is inserted into strings that are later passed to an instance of SQL Server for parsing and execution. Any procedure that constructs SQL statements should be reviewed for injection vulnerabilities because SQL Server will execute all syntactically valid queries that it receives. Even parameterized data can be manipulated by a skilled and determined attacker.
55;Spoofing of Destination Data Store PostgreSQL Database;Spoofing;Binary;PostgreSQL Database may be spoofed by an attacker and this may lead to data being written to the attacker's target instead of PostgreSQL Database. Consider using a standard authentication mechanism to identify the destination data store.
60;External Entity Amazon RDS Potentially Denies Receiving Data;Repudiation;HTTPS;Amazon RDS claims that it did not receive data from a process on the other side of the trust boundary. Consider using logging or auditing to record the source, time, and summary of the received data.
59;Spoofing of the Amazon RDS External Destination Entity;Spoofing;HTTPS;Amazon RDS may be spoofed by an attacker and this may lead to data being sent to the attacker's target instead of Amazon RDS. Consider using a standard authentication mechanism to identify the external entity.
67;Web Server May be Subject to Elevation of Privilege Using Remote Code Execution;Elevation Of Privilege;HTTPS;Amazon RDS may be able to remotely execute code for Web Server.
66;Elevation Using Impersonation;Elevation Of Privilege;HTTPS;Web Server may be able to impersonate the context of Amazon RDS in order to gain additional privilege.
64;Potential Process Crash or Stop for Web Server;Denial Of Service;HTTPS;Web Server crashes, halts, stops or runs slowly
63;Potential Data Repudiation by Web Server;Repudiation;HTTPS;Web Server claims that it did not receive data from a source outside the trust boundary. Consider using logging or auditing to record the source, time, and summary of the received data.
62;Cross Site Scripting;Tampering;HTTPS;The web server 'Web Server' could be a subject to a cross-site scripting attack because it does not sanitize untrusted input.
68;Elevation by Changing the Execution Flow in Web Server;Elevation Of Privilege;HTTPS;An attacker may pass data into Web Server in order to change the flow of program execution within Web Server to the attacker's choosing.
191;Spoofing of Destination Data Store Configuration File;Spoofing;Generic Data Flow;Configuration File may be spoofed by an attacker and this may lead to data being written to the attacker's target instead of Configuration File. Consider using a standard authentication mechanism to identify the destination data store.
192;Authorization Bypass;Information Disclosure;Generic Data Flow;Can you access Configuration File and bypass the permissions for the object? For example by editing the files directly with a hex editor, or reaching it via filesharing? Ensure that your program is the only one that can access the data, and that all other subjects have to use your interface.
193;Potential Excessive Resource Consumption for Web Server or Configuration File;Denial Of Service;Generic Data Flow;Does Web Server or Configuration File take explicit steps to control resource consumption? Resource consumption attacks can be hard to deal with, and there are times that it makes sense to let the OS do the job. Be careful that your resource requests don't deadlock, and that they do timeout.
194;Weak Credential Storage;Information Disclosure;Generic Data Flow;Credentials held at the server are often disclosed or tampered with and credentials stored on the client are often stolen. For server side, consider storing a salted hash of the credentials instead of storing the credentials themselves. If this is not possible due to business requirements, be sure to encrypt the credentials before storage, using an SDL-approved mechanism. For client side, if storing credentials is required, encrypt them and protect the data store in which they're stored
195;Spoofing of Destination Data Store Configuration File;Spoofing;Generic Data Flow;Configuration File may be spoofed by an attacker and this may lead to data being written to the attacker's target instead of Configuration File. Consider using a standard authentication mechanism to identify the destination data store.
196;Authorization Bypass;Information Disclosure;Generic Data Flow;Can you access Configuration File and bypass the permissions for the object? For example by editing the files directly with a hex editor, or reaching it via filesharing? Ensure that your program is the only one that can access the data, and that all other subjects have to use your interface.
197;Weak Credential Storage;Information Disclosure;Generic Data Flow;Credentials held at the server are often disclosed or tampered with and credentials stored on the client are often stolen. For server side, consider storing a salted hash of the credentials instead of storing the credentials themselves. If this is not possible due to business requirements, be sure to encrypt the credentials before storage, using an SDL-approved mechanism. For client side, if storing credentials is required, encrypt them and protect the data store in which they're stored
198;Potential Excessive Resource Consumption for Vault or Configuration File;Denial Of Service;Generic Data Flow;Does Vault or Configuration File take explicit steps to control resource consumption? Resource consumption attacks can be hard to deal with, and there are times that it makes sense to let the OS do the job. Be careful that your resource requests don't deadlock, and that they do timeout.
199;JavaScript Object Notation Processing;Tampering;HTTPS;If a dataflow contains JSON, JSON processing and hijacking threats may be exploited.
200;JavaScript Object Notation Processing;Tampering;HTTPS;If a dataflow contains JSON, JSON processing and hijacking threats may be exploited.
